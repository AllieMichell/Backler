import React from 'react';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardMedia from '@material-ui/core/CardMedia';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import MoreVertIcon from '@material-ui/icons/MoreVert';
import Grid from '@material-ui/core/Grid';
import { Link } from 'react-router-dom';
import Button from '@material-ui/core/Button';
import {InputBase} from '@material-ui/core'
//import CardsByName from './cardsbynameDB';
import { makeStyles } from '@material-ui/core/styles';
import Loading from '../loading/loading';
import AccountCircle from '@material-ui/icons/AccountCircle';
import TextField from '@material-ui/core/TextField';
import SearchIcon from '@material-ui/icons/Search';
import { fade } from '@material-ui/core/styles/colorManipulator';
import notFound from '../../../icons/not-found2.png'
import GetAppIcon from '@material-ui/icons/GetApp';
import InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';
import axios from 'axios';
import './cards.css'
// const useStyles = makeStyles( theme => ({
//   margin:{
//     margin:theme.spacing(1),
//   },
// }));
const styles = theme => ({
  card: {
    margin: 20,
    pading:10,
    },
  media: {
    height: 0,
    paddingTop: '56.25%', // 16:9
  },
  actions: {
    display: 'flex',
  },
  expand: {
    transform: 'rotate(0deg)',
    marginLeft: 'auto',
    transition: theme.transitions.create('transform', {
      duration: theme.transitions.duration.shortest,
    }),
  },
  expandOpen: {
    transform: 'rotate(180deg)',
  },
  avatar: {
    marginLeft: '20px'
  },
  button: {
    backgroundColor: '#00796b',
    color: '#ffffff',
    '&:hover': {
      backgroundColor: '#004d40',
    },

    
  },
  search: {
    position: 'relative',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: fade(theme.palette.common.black, 0.10),
    '&:hover': {
      backgroundColor: fade(theme.palette.common.black, 0.15),
    },
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      marginLeft: theme.spacing.unit,
      width: 'auto',
      boxShadow: '6px 10px 15px -9px rgba(0,0,0,0.46)',
      
    },
  },
  searchIcon: {
    width: theme.spacing.unit * 9,
    height: '100%',
    position: 'absolute',
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
  },
      inputRoot: {
    color: 'inherit',
    width: '100%',
  },
  inputInput: {
    paddingTop: theme.spacing.unit,
    paddingRight: theme.spacing.unit,
    paddingBottom: theme.spacing.unit,
    paddingLeft: theme.spacing.unit * 10,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      width: 200,
      '&:focus': {
        width: 200,
      },
    },
  },
    
    grow: {
    flexGrow: 1,
    alignContent:'center'
  }
});

class RecipeReviewCard extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      logs: [],
      isLoading: false,
      expanded: false,
      search:'',
      data: {},
      nameProject:'hols',
      idProject:'5d6ed1ce955c1d14ec4d26d3'
    };
  }
  updateSearch(e){
    this.setState({search: e.target.value.substr(0,50)});
  }

  
  componentDidMount() {
    this.setState({ isLoading: true });
    fetch(`http://${process.env.IP_API}/buckler/api/projects/projectsList`)
      .then(response => response.json())
      .then((json) => {
        console.log(json);
        this.setState({
          logs: json,
          isLoading: false,
          anchorEl: null
        });
      });  
  }

  // searchdb(e){
  //   fetch(`http://localhost:3100/Buckler/api/projects/nameP/${'Buckler'}`)
  // .then(response => response.json())
  // .then( (json) => {
  //   console.log(json);
  //   this.setState({
  //     data: json
  //   });
  // });
  // }



  



  handleExpandClick = () => {
    this.setState(state => ({ expanded: !state.expanded }));
  };

  handleClick = (event) => {
    this.setState({ anchorEl: event.currentTarget });
  };

  handleClose = () => {
    this.setState({ anchorEl: null });
  };

  render() {
    // const getDownload = axios.get(`http://${process.env.IP_API}/buckler/api/functions/downloadProjectID/${this.state.idProject}`)
    // const getDownloadString = String(getDownload);
    const { classes } = this.props;
    const { logs, isLoading, anchorEl } = this.state;
    // const styl = useStyles();
    
      var filteredLogs = this.state.logs;
    
       if(this.state.search.length >=2){
       filteredLogs = this.state.logs.filter(

      (project) => {     
      return project.projectName.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;
      // return project.dbType.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;
      //return project.serverName.toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;
       
      } );}
      const showMessage = () => {
        if(filteredLogs.length <= 0){
          return <div style = {{marginTop: 140}}>
            <img src ={notFound} width = {100}></img>
            <Typography style = {{color:"#585858", fontSize:24}} variant="h3" gutterBottom>
              No results found</Typography>
          </div>
        } 
      }
    

    if (isLoading) {
      return <Loading />;
    }
  
    return (
      <div >
        
        <Grid container justify = 'center' style={{marginBottom: 30}}>  
       <Grid item xs= {6}>
        <div className={classes.grow} />
            <div className={classes.search}>
              <div className={classes.searchIcon}>
                <SearchIcon />
              </div>
              <InputBase
              className='search'
                placeholder="Searchâ€¦"
                classes={{
                  root: classes.inputRoot,
                  input: classes.inputInput,
                }}
                inputProps={{
                  'aria-label': 'search'
                }}
                value={this.state.search}
                onChange={this.updateSearch.bind(this)}
              />
            </div> 
            <div>{showMessage()}</div>
            </Grid>
            </Grid>

              
            
        {/* <div style = {{paddingBottom:20}}>
        <Grid xs={6} style={{background:"red"}} container justify = 'center'  alignItems="flex-end">
          <Grid item  >
          <SearchIcon />
          </Grid>
          <Grid item xs = {6}>
            <TextField 
            id="input-with-icon-grid"
            label="Search by name" 
            type ='text'
            value = {this.state.search}
            onChange ={this.updateSearch.bind(this)}
            />
          </Grid>
        </Grid>
      </div> */}
       <Grid container justify="left">
       
          {filteredLogs.map(project => (
            <Grid key={project._id} item xs={12} sm={6} md={4}>
              <div className={classes.control}>
                <Card className={classes.card}>
                  <CardHeader
                    avatar={(
                      <div aria-label="Recipe" className={classes.avatar}>
                        {(() => {
                          switch (project.dbType) {
                            case 'mysql':
                              return (
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" version="1.1" width="65px" height="65px">
                                  <g id="surface1">
                                    <path d="M 31.167969 8 C 30.699219 7.988281 30.289063 8.167969 30.078125 8.6875 C 29.71875 9.558594 30.613281 10.410156 30.933594 10.855469 C 31.15625 11.164063 31.445313 11.511719 31.605469 11.859375 C 31.710938 12.089844 31.726563 12.320313 31.816406 12.5625 C 32.039063 13.160156 32.394531 13.839844 32.679688 14.394531 C 32.824219 14.675781 32.984375 14.96875 33.167969 15.21875 C 33.28125 15.371094 33.472656 15.441406 33.503906 15.675781 C 33.316406 15.941406 33.304688 16.351563 33.199219 16.6875 C 32.722656 18.191406 32.902344 20.0625 33.59375 21.171875 C 33.808594 21.515625 34.3125 22.246094 35 21.96875 C 35.601563 21.722656 35.46875 20.960938 35.640625 20.285156 C 35.679688 20.136719 35.65625 20.023438 35.734375 19.921875 L 35.734375 19.953125 C 35.914063 20.320313 36.097656 20.6875 36.28125 21.050781 C 36.691406 21.707031 37.414063 22.390625 38.023438 22.855469 C 38.339844 23.09375 38.589844 23.507813 39 23.648438 L 39 23.617188 L 38.96875 23.617188 C 38.890625 23.492188 38.765625 23.441406 38.664063 23.34375 C 38.425781 23.109375 38.160156 22.816406 37.964844 22.546875 C 37.40625 21.792969 36.914063 20.964844 36.46875 20.105469 C 36.253906 19.695313 36.066406 19.242188 35.886719 18.824219 C 35.816406 18.660156 35.816406 18.417969 35.671875 18.332031 C 35.472656 18.640625 35.183594 18.886719 35.03125 19.25 C 34.789063 19.828125 34.753906 20.535156 34.664063 21.265625 C 34.609375 21.285156 34.632813 21.269531 34.605469 21.296875 C 34.179688 21.191406 34.027344 20.753906 33.871094 20.378906 C 33.472656 19.429688 33.394531 17.898438 33.75 16.808594 C 33.839844 16.523438 34.25 15.632813 34.085938 15.371094 C 34.007813 15.109375 33.742188 14.960938 33.597656 14.761719 C 33.414063 14.515625 33.234375 14.191406 33.109375 13.90625 C 32.78125 13.164063 32.472656 12.304688 32.125 11.554688 C 31.960938 11.195313 31.683594 10.835938 31.453125 10.515625 C 31.199219 10.164063 30.917969 9.90625 30.71875 9.476563 C 30.652344 9.328125 30.554688 9.085938 30.660156 8.929688 C 30.691406 8.824219 30.738281 8.78125 30.84375 8.746094 C 31.019531 8.609375 31.511719 8.789063 31.699219 8.867188 C 32.1875 9.070313 32.597656 9.265625 33.011719 9.539063 C 33.210938 9.671875 33.410156 9.925781 33.652344 10 L 33.925781 10 C 34.359375 10.097656 34.839844 10.027344 35.238281 10.152344 C 35.949219 10.367188 36.585938 10.703125 37.160156 11.066406 C 38.921875 12.175781 40.363281 13.757813 41.34375 15.644531 C 41.503906 15.949219 41.574219 16.242188 41.714844 16.5625 C 41.992188 17.210938 42.347656 17.882813 42.628906 18.515625 C 42.90625 19.152344 43.179688 19.789063 43.574219 20.316406 C 43.78125 20.59375 44.585938 20.746094 44.949219 20.898438 C 45.203125 21.007813 45.625 21.121094 45.863281 21.265625 C 46.328125 21.542969 46.773438 21.875 47.207031 22.183594 C 47.425781 22.335938 48.089844 22.667969 48.125 22.945313 C 47.050781 22.917969 46.230469 23.015625 45.53125 23.3125 C 45.332031 23.398438 45.011719 23.398438 44.980469 23.648438 C 45.085938 23.761719 45.105469 23.933594 45.191406 24.074219 C 45.359375 24.34375 45.640625 24.707031 45.894531 24.898438 C 46.171875 25.105469 46.453125 25.328125 46.75 25.511719 C 47.273438 25.828125 47.859375 26.011719 48.367188 26.332031 C 48.664063 26.523438 48.964844 26.761719 49.253906 26.972656 C 49.398438 27.082031 49.492188 27.246094 49.679688 27.3125 L 49.679688 27.28125 C 49.582031 27.15625 49.558594 26.984375 49.46875 26.855469 L 49.066406 26.453125 C 48.679688 25.941406 48.1875 25.488281 47.664063 25.113281 C 47.246094 24.8125 46.3125 24.40625 46.140625 23.921875 L 46.109375 23.890625 C 46.402344 23.859375 46.75 23.75 47.023438 23.675781 C 47.484375 23.554688 47.890625 23.585938 48.363281 23.464844 C 48.578125 23.402344 48.792969 23.339844 49.007813 23.28125 L 49.007813 23.15625 C 48.769531 22.914063 48.597656 22.585938 48.335938 22.363281 C 47.652344 21.78125 46.90625 21.199219 46.136719 20.714844 C 45.710938 20.445313 45.183594 20.269531 44.734375 20.042969 C 44.582031 19.964844 44.316406 19.925781 44.214844 19.796875 C 43.976563 19.496094 43.847656 19.113281 43.664063 18.761719 C 43.28125 18.023438 42.90625 17.21875 42.566406 16.441406 C 42.335938 15.914063 42.183594 15.390625 41.894531 14.914063 C 40.507813 12.636719 39.015625 11.257813 36.703125 9.90625 C 36.210938 9.617188 35.621094 9.507813 34.996094 9.359375 C 34.65625 9.335938 34.324219 9.316406 33.984375 9.296875 C 33.78125 9.210938 33.566406 8.960938 33.375 8.835938 C 32.894531 8.535156 31.949219 8.011719 31.167969 8 Z M 34.476563 11.3125 C 34.253906 11.308594 34.09375 11.339844 33.925781 11.375 L 33.925781 11.40625 L 33.957031 11.40625 C 34.0625 11.625 34.253906 11.765625 34.386719 11.953125 C 34.488281 12.167969 34.585938 12.382813 34.6875 12.597656 L 34.71875 12.566406 C 34.90625 12.433594 34.996094 12.21875 34.996094 11.894531 C 34.917969 11.816406 34.90625 11.714844 34.84375 11.621094 C 34.753906 11.492188 34.585938 11.421875 34.476563 11.3125 Z M 1.867188 23.996094 C 1.566406 24.007813 1.238281 24.066406 0.882813 24.179688 C 0.289063 24.359375 -0.00390625 24.714844 -0.00390625 25.4375 L -0.00390625 33 L 2 33 L 2 25.621094 L 4.777344 31.929688 C 5.121094 32.714844 5.589844 32.996094 6.507813 32.996094 C 7.429688 32.996094 7.878906 32.714844 8.222656 31.929688 L 11 25.78125 L 11 33 L 13 33 L 13 25.4375 C 13 24.714844 12.710938 24.359375 12.113281 24.179688 C 10.691406 23.730469 9.734375 24.117188 9.304688 25.089844 L 6.453125 31.503906 L 3.695313 25.089844 C 3.382813 24.359375 2.757813 23.960938 1.867188 23.996094 Z M 26.246094 24 C 25.457031 24 23 24.09375 23 26 L 23 27.234375 C 23 28.109375 23.769531 28.824219 25.4375 29 C 25.625 29.011719 25.8125 29.027344 26 29.027344 C 26 29.027344 27.945313 28.988281 28 29 C 29.125 29 29 29.875 29 30 L 29 31 C 29 31.136719 28.96875 32 27.988281 32 L 23 32 L 23 33 L 28.007813 33 C 28.664063 33 29.300781 32.863281 29.808594 32.625 C 30.652344 32.238281 31 31.714844 31 31.027344 L 31 29.597656 C 31 28.0625 29.09375 28 28 28 L 26 28 C 25.214844 28 25.09375 27.523438 25 27 L 25 26 C 25.09375 25.601563 25.269531 25.0625 25.964844 25 L 31 25 L 31 24 Z M 33.980469 24 C 32.503906 24.203125 31.984375 24.9375 31.984375 26 L 31.984375 31 C 31.984375 31.972656 32.527344 32.558594 33.644531 32.863281 C 34.019531 32.96875 34.359375 33.011719 34.679688 33.011719 L 36.90625 33 L 38.214844 33 L 39.328125 34 L 41.578125 34 L 40.03125 32.605469 C 40.757813 32.304688 40.984375 31.84375 40.984375 30.980469 L 40.984375 26 C 40.984375 24.9375 40.292969 24.203125 38.816406 24 Z M 42 24 L 42 30.957031 C 42 32.164063 42.683594 32.84375 44.492188 32.980469 C 44.660156 32.988281 44.832031 33 45 33 L 50 33 L 50 32 L 45.378906 32 C 44.347656 32 44 31.566406 44 30.949219 L 44 24 Z M 35.171875 25 L 37.746094 25 C 38.425781 25 38.882813 25.546875 38.984375 26 C 38.984375 26 39 30.65625 39 31 C 39 31.34375 38.808594 31.5 38.808594 31.5 L 38.265625 31 L 36 31 L 37.113281 32 L 35.171875 32 C 34.476563 32 34.085938 31.484375 33.984375 31 L 33.984375 26.101563 C 33.984375 25.570313 34.390625 25 35.171875 25 Z M 14 27 C 14.039063 27.039063 14 31.261719 14 31.34375 C 14.015625 32.21875 15.125 32.984375 16.863281 33 L 20 33 L 20 33.066406 C 20 33.253906 20.136719 33.878906 19 34 C 18.988281 34 14.011719 34 14 34 L 14 35 L 19.214844 35 C 20.097656 34.972656 22.011719 34.773438 22 33.242188 C 22 33.214844 22.007813 27 22 27 L 20 27 L 20 32 C 19.96875 32 17.523438 32.007813 17.03125 32 C 16.066406 31.984375 15.984375 31.433594 16 31.222656 L 16 27 Z " />
                                  </g>
                                </svg>
                              );
                            case 'mongodb':
                              return (
                                <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 102 156">
                                  <g fill="none">
                                    <path d="M35.053 142.317l-3.783-1.293s.462-19.286-6.46-20.67c-4.613-5.353.74-227.013 17.35-.739 0 0-5.722 2.86-6.737 7.752-1.108 4.799-.37 14.95-.37 14.95z" fill="#FFF" />
                                    <path d="M35.053 142.317l-3.783-1.293s.462-19.286-6.46-20.67c-4.613-5.353.74-227.013 17.35-.739 0 0-5.722 2.86-6.737 7.752-1.108 4.799-.37 14.95-.37 14.95z" fill="#A6A385" />
                                    <path d="M37.084 123.676s33.13-21.779 25.377-67.09c-7.474-32.943-25.1-43.74-27.038-47.893C33.301 5.74 31.27.573 31.27.573l1.385 91.634c0 .093-2.861 28.054 4.43 31.47" fill="#FFF" />
                                    <path d="M37.084 123.676s33.13-21.779 25.377-67.09c-7.474-32.943-25.1-43.74-27.038-47.893C33.301 5.74 31.27.573 31.27.573l1.385 91.634c0 .093-2.861 28.054 4.43 31.47" fill="#212121" />
                                    <path d="M29.333 124.875S-1.767 103.65.079 66.277C1.832 28.903 23.795 10.539 28.04 7.217c2.769-2.953 2.861-4.061 3.046-7.014 1.938 4.153 1.569 62.106 1.845 68.934.83 26.3-1.476 50.756-3.598 55.738z" fill="#FFF" />
                                    <path d="M29.333 124.875S-1.767 103.65.079 66.277C1.832 28.903 23.795 10.539 28.04 7.217c2.769-2.953 2.861-4.061 3.046-7.014 1.938 4.153 1.569 62.106 1.845 68.934.83 26.3-1.476 50.756-3.598 55.738z" fill="#58AA50" />
                                  </g>
                                </svg>

                              );
                            case 'jenkins':
                              return (
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" version="1.1" width="60px" height="60px">
                                  <g id="surface1">
                                    <path d="M 27.996094 2 C 21.855469 2.039063 17.570313 3.058594 14.675781 4.675781 C 12.035156 6.152344 10.699219 8.203125 10.242188 10.292969 C 9.785156 10.523438 9.035156 10.976563 8.375 12.109375 C 7.511719 13.574219 7.136719 16.039063 7.964844 19.660156 C 6.726563 20.597656 5.921875 21.988281 5.734375 23.527344 C 5.515625 25.332031 5.960938 27.285156 7.269531 28.683594 C 8.421875 29.917969 9.675781 30.460938 10.640625 30.667969 C 11.050781 30.753906 11.078125 30.695313 11.375 30.695313 C 11.535156 31.546875 12.089844 33.59375 13.230469 35.84375 C 12.464844 36.277344 10.589844 37.328125 8.28125 38.667969 C 6.953125 39.4375 5.640625 40.214844 4.648438 40.828125 C 4.148438 41.136719 3.734375 41.402344 3.421875 41.621094 C 3.261719 41.726563 3.132813 41.820313 3.011719 41.921875 C 2.949219 41.976563 2.890625 42.027344 2.820313 42.109375 C 2.746094 42.191406 2.589844 42.246094 2.539063 42.71875 L 2.460938 43.394531 L 4.328125 48 L 44.824219 48 L 44.980469 47.191406 C 44.980469 47.191406 45.257813 45.789063 45.519531 44.203125 C 45.785156 42.613281 46.066406 40.988281 46 39.933594 C 45.972656 39.539063 45.828125 39.378906 45.722656 39.242188 C 45.621094 39.105469 45.519531 39.003906 45.410156 38.902344 C 45.1875 38.695313 44.929688 38.496094 44.625 38.28125 C 44.023438 37.847656 43.265625 37.363281 42.503906 36.894531 C 41.472656 36.265625 41.003906 36.007813 40.453125 35.691406 C 40.992188 34.917969 41.703125 33.765625 42.464844 31.886719 C 43.730469 28.757813 44.871094 24.082031 44.433594 17.875 C 44.015625 12.015625 41.972656 7.957031 38.945313 5.4375 C 36.171875 3.128906 32.65625 2.15625 29 2.023438 L 29 2 C 28.886719 2 28.78125 2.015625 28.671875 2.015625 C 28.445313 2.011719 28.21875 2 27.996094 2 Z M 28.667969 4.015625 C 32.101563 4.097656 35.257813 4.96875 37.667969 6.976563 C 38.96875 8.058594 40.074219 9.480469 40.902344 11.332031 C 40.53125 11.1875 40.15625 11.078125 39.804688 11.015625 C 39.40625 10.941406 39.019531 10.90625 38.660156 10.894531 C 37.59375 10.855469 36.804688 11.019531 36.804688 11.019531 L 37.195313 12.980469 C 37.195313 12.980469 38.289063 12.773438 39.445313 12.984375 C 40.601563 13.195313 41.628906 13.640625 42.03125 15.242188 L 42.066406 15.234375 C 42.179688 15.828125 42.269531 16.457031 42.339844 17.117188 C 42.1875 16.84375 42.042969 16.578125 41.878906 16.285156 C 41.367188 15.375 40.867188 14.5 40.867188 14.5 L 39.132813 15.5 C 39.132813 15.5 39.628906 16.367188 40.136719 17.265625 C 40.363281 17.667969 40.582031 18.0625 40.765625 18.398438 C 40.113281 18.417969 39.117188 18.28125 38.277344 18.039063 L 37.722656 19.960938 C 38.761719 20.261719 39.882813 20.425781 40.835938 20.398438 C 41.3125 20.382813 41.746094 20.34375 42.199219 20.128906 C 42.300781 20.078125 42.410156 20.015625 42.515625 19.933594 C 42.605469 24.859375 41.644531 28.582031 40.609375 31.136719 C 39.804688 33.125 39.007813 34.328125 38.578125 34.90625 L 38.511719 34.859375 C 38.511719 34.859375 36.519531 38 32 38 C 27.296875 38 23.085938 35.753906 21.730469 34.3125 C 20.308594 32.808594 19.988281 30.851563 19.988281 30.851563 L 18.011719 31.148438 C 18.011719 31.148438 18.367188 33.664063 20.269531 35.6875 C 20.925781 36.378906 21.875 37.082031 23.015625 37.71875 C 22.476563 37.894531 21.960938 38.207031 21.59375 38.710938 C 21.535156 38.792969 21.496094 38.882813 21.449219 38.96875 C 19.140625 38.832031 17.65625 38.070313 16.71875 37.328125 C 15.867188 36.65625 15.5625 36.148438 15.46875 35.976563 L 15.332031 35.753906 C 14.28125 34.050781 13.644531 31.6875 13.359375 30.441406 C 13.855469 30.0625 14.394531 29.449219 14.894531 28.449219 L 13.105469 27.550781 C 12.800781 28.164063 12.523438 28.507813 12.3125 28.714844 L 12 28.769531 C 12 28.769531 11.679688 28.839844 11.058594 28.707031 C 10.433594 28.578125 9.597656 28.242188 8.730469 27.316406 C 7.921875 26.453125 7.5625 25.066406 7.71875 23.765625 C 7.878906 22.464844 8.523438 21.359375 9.449219 20.890625 L 9.488281 20.875 C 10.589844 20.257813 11.265625 20.199219 11.644531 20.28125 C 12.027344 20.367188 12.257813 20.582031 12.480469 20.96875 C 12.929688 21.742188 13 23.015625 13 23.015625 L 13.019531 24.609375 L 17.019531 22.609375 L 17 21.96875 C 17 21.96875 16.953125 20.992188 16.449219 19.554688 C 16.183594 18.808594 16.367188 17.746094 16.773438 16.597656 C 17.179688 15.449219 17.769531 14.316406 17.984375 13.1875 C 18.21875 11.945313 17.835938 10.960938 17.464844 10.332031 C 17.847656 9.644531 18.480469 8.691406 19.480469 7.6875 C 21.273438 5.890625 24.132813 4.101563 28.667969 4.015625 Z M 25.269531 10.800781 C 23.472656 10.824219 22.160156 11.523438 21.359375 12.359375 C 20.289063 13.480469 20.019531 14.792969 20.019531 14.792969 L 21.980469 15.207031 C 21.980469 15.207031 22.152344 14.425781 22.804688 13.746094 C 23.457031 13.066406 24.480469 12.441406 26.773438 12.972656 L 27.226563 11.027344 C 26.519531 10.859375 25.867188 10.792969 25.269531 10.800781 Z M 28.941406 14.667969 L 27.058594 15.332031 C 27.058594 15.332031 27.363281 16.210938 27.753906 17.21875 C 28.078125 18.0625 28.433594 18.875 28.785156 19.554688 C 28.355469 19.609375 27.523438 19.570313 26.398438 19.082031 L 25.601563 20.917969 C 27.082031 21.558594 28.339844 21.757813 29.359375 21.550781 C 29.871094 21.449219 30.378906 21.238281 30.71875 20.730469 C 31.058594 20.21875 30.996094 19.46875 30.707031 18.988281 C 30.496094 18.640625 30 17.480469 29.621094 16.5 C 29.242188 15.523438 28.941406 14.667969 28.941406 14.667969 Z M 35 15.96875 L 33 16.03125 C 33 16.03125 33.128906 19.839844 36.328125 22.738281 C 37.667969 23.953125 38.339844 24.757813 38.46875 25.039063 C 38.488281 25.078125 38.488281 25.074219 38.496094 25.085938 C 38.496094 25.070313 38.484375 25.117188 38.332031 25.253906 C 38.113281 25.453125 37.082031 26.011719 36 26.390625 C 34.914063 26.765625 33.691406 27.019531 33.027344 27 C 32.78125 26.992188 32.800781 26.964844 32.828125 26.984375 C 32.828125 26.972656 32.824219 26.96875 32.824219 26.933594 C 32.8125 26.742188 32.921875 26.378906 32.921875 26.378906 L 31.078125 25.621094 C 31.078125 25.621094 30.785156 26.234375 30.824219 27.03125 C 30.84375 27.429688 30.964844 27.9375 31.355469 28.351563 C 31.742188 28.765625 32.339844 28.984375 32.972656 29 C 34.113281 29.03125 35.421875 28.703125 36.652344 28.28125 C 37.882813 27.855469 38.949219 27.390625 39.667969 26.746094 C 39.964844 26.476563 40.269531 26.148438 40.421875 25.667969 C 40.570313 25.1875 40.488281 24.628906 40.28125 24.1875 C 39.859375 23.296875 39.058594 22.519531 37.671875 21.261719 C 35.089844 18.917969 35 15.96875 35 15.96875 Z M 10.378906 22.214844 C 10.378906 22.214844 8.558594 23.746094 9.015625 26.183594 L 10.984375 25.816406 C 10.71875 24.40625 11.621094 23.785156 11.621094 23.785156 Z M 28.628906 28.222656 L 27.371094 29.777344 C 30.910156 32.652344 35.152344 31.988281 35.152344 31.988281 L 34.847656 30.011719 C 34.847656 30.011719 31.449219 30.515625 28.628906 28.222656 Z M 39.25 28.339844 C 38.007813 29.75 35.90625 30.003906 35.90625 30.003906 L 36.09375 31.996094 C 36.09375 31.996094 38.882813 31.789063 40.75 29.660156 Z M 27.964844 31.730469 L 26.035156 32.269531 C 26.378906 33.492188 27.285156 34.335938 28.273438 34.78125 C 29.261719 35.226563 30.347656 35.363281 31.363281 35.386719 C 33.398438 35.425781 35.234375 34.972656 35.234375 34.972656 L 34.765625 33.027344 C 34.765625 33.027344 33.113281 33.417969 31.40625 33.386719 C 30.550781 33.367188 29.703125 33.234375 29.09375 32.957031 C 28.488281 32.683594 28.136719 32.355469 27.964844 31.730469 Z M 37.4375 39.03125 C 37.765625 39.023438 38.128906 39.09375 38.390625 39.234375 C 38.746094 39.417969 38.949219 39.628906 39.007813 40.117188 C 39.074219 40.6875 39.144531 41.734375 39.050781 42.621094 C 39.003906 43.066406 38.914063 43.472656 38.804688 43.734375 C 38.695313 44 38.589844 44.085938 38.550781 44.105469 C 37.851563 44.457031 36.773438 44.496094 35.875 44.382813 C 34.976563 44.269531 34.316406 44.050781 34.316406 44.050781 L 34.160156 44 L 30.769531 44 L 30.566406 44.097656 C 30.566406 44.097656 29.570313 44.578125 28.226563 45.058594 C 26.882813 45.539063 25.183594 46 24 46 C 23.667969 46 23.582031 45.945313 23.507813 45.878906 C 23.433594 45.8125 23.320313 45.652344 23.230469 45.277344 C 23.042969 44.523438 23.027344 43.074219 23.058594 41.136719 L 23.0625 41.066406 L 23.050781 41.003906 C 22.976563 40.351563 23.09375 40.046875 23.207031 39.890625 C 23.324219 39.734375 23.496094 39.625 23.855469 39.5625 C 24.570313 39.445313 25.863281 39.734375 26.84375 40.214844 L 26.859375 40.21875 L 30.78125 42 L 32.355469 42 L 32.628906 41.777344 C 33.171875 41.339844 34.171875 40.65625 35.109375 40.089844 C 35.574219 39.808594 36.03125 39.550781 36.40625 39.363281 C 36.78125 39.175781 37.113281 39.0625 37.117188 39.0625 L 37.121094 39.0625 C 37.21875 39.042969 37.324219 39.035156 37.4375 39.03125 Z M 31.171875 39.980469 C 31.347656 39.984375 31.527344 39.988281 31.707031 39.992188 C 31.703125 39.996094 31.699219 39.996094 31.699219 40 L 31.21875 40 Z M 18.761719 40.441406 C 19.464844 40.652344 20.203125 40.847656 21.050781 40.941406 C 21.058594 41.042969 21.054688 41.132813 21.066406 41.234375 L 21.058594 41.105469 C 21.050781 41.511719 21.058594 41.824219 21.054688 42.195313 C 20.371094 41.726563 19.539063 41.121094 18.761719 40.441406 Z " />
                                  </g>
                                </svg>
                              );
                            default:
                              return null;
                          }
                        })()}
                      </div>
                     )}
                    action={(
                      <div>
                        {/* <IconButton
                          aria-owns={anchorEl ? 'simple-menu' : undefined}
                          aria-haspopup="true"
                          onClick={this.handleClick}
                        >
                          <MoreVertIcon />
                        </IconButton>
                        {project._id ? (
                          <Menu
                            key={project._id}
                            id="simple-menu"
                            anchorEl={anchorEl}
                            open={Boolean(anchorEl)}
                            onClose={this.handleClose}
                          >
                            <MenuItem
                              onClick={this.handleClose}
                              component={Link}
                              to={`/project/${project._id}`}
                            >
                             Backup
                            </MenuItem>
                            <MenuItem
                              onClick={this.handleClose}
                            >
                            Info
                            </MenuItem>
                          </Menu>
                        )
                          : null
                        } */}
                      </div>

        )}
                    title={(
                      <div aria-label="Recipe">
                        <Typography variant="title" gutterBottom>
                         {project.projectName}
                        </Typography>

                                            </div>
)}
                    subheader={(
                      <div>
                        {(() => {
                          switch (project.serverName) {
                            case 'windows':
                              return (
                                <svg height="20px" id="Layer_1" version="1.0" viewBox="0 0 32 32" width="20px">
                                  <g>
                                    <polygon fill="#67C947" points="15,2.5 32,0 32,15 15,15  " />
                                    <polygon fill="#E54848" points="0,4.703 13,2.797 13,15 0,15  " />
                                    <polygon fill="#F7CD48" points="15,29.5 32,32 32,17 15,17  " />
                                    <polygon fill="#11A2EA" points="0,27.297 13,29.203 13,17 0,17  " />
                                  </g>
                                  <g />
                                  <g />
                                  <g />
                                  <g />
                                  <g />
                                  <g />

                                </svg>
                              );
                            case 'ubuntu':
                              return (
                                <svg height="20px" id="Layer_1" version="1.1" viewBox="0 0 512.00003 512" width="20px" xmlns="http://www.w3.org/2000/svg">
                                  <defs id="defs7" />
                                  <g id="g6920" transform="translate(-353.24162,-137.45047)">
                                    <path
                                      d="m -733.62329,72.267944 c 0,203.804876 -165.21649,369.021366 -369.02141,369.021366 -203.8048,0 -369.0213,-165.21649 -369.0213,-369.021366 0,-203.804874 165.2165,-369.021364 369.0213,-369.021364 203.80492,0 369.02141,165.21649 369.02141,369.021364 z"
                                      id="path5072"
                                      style={{
                                        fill: '#f47421', fillOpacity: 1, fillRule: 'nonzero', stroke: 'none'
                                      }}
                                      transform="matrix(0.69372682,0,0,0.69372682,1374.1758,343.31626)"
                                    />
                                    <path
                                      d="m 679.53691,276.15745 c 15.8235,9.1376 36.0519,3.718 45.1836,-12.1017 9.1369,-15.8249 3.721,-36.0519 -12.1039,-45.1881 -15.8227,-9.1339 -36.0489,-3.715 -45.1859,12.1107 -9.1331,15.8189 -3.715,36.0452 12.1062,45.1791 z m -67.7138,213.94022 c -14.54901,0 -28.33661,-3.2344 -40.71241,-8.992 l -22.9898,41.1975 c 19.2035,9.5086 40.822,14.881 63.70221,14.881 13.3055,0 26.1716,-1.8436 38.3979,-5.2297 2.1636,-13.2882 10.0539,-25.5355 22.6332,-32.7995 12.5575,-7.2498 27.0907,-7.9684 39.67,-3.2141 24.4647,-24.05551 40.3835,-56.78441 42.7009,-93.23211 l -47.1533,-0.6834 c -4.339,49.3702 -45.7574,88.07531 -96.2487,88.07531 z m 0,-193.29562 c 50.4913,0 91.9097,38.71251 96.2487,88.07751 l 47.1533,-0.691 c -2.3204,-36.4446 -18.24,-69.1729 -42.7076,-93.22751 -12.5778,4.7513 -27.1089,4.0312 -39.6678,-3.2201 -12.5779,-7.261 -20.4667,-19.5068 -22.6301,-32.7966 -12.2249,-3.3823 -25.091,-5.2282 -38.3965,-5.2282 -22.88021,0 -44.49721,5.3709 -63.69921,14.8833 l 22.9883,41.1922 c 12.3743,-5.7575 26.1619,-8.992 40.71091,-8.992 z m -96.64671,96.64811 c 0,-32.6981 16.25,-61.5785 41.0954,-79.0667 l -24.1876,-40.52021 c -28.9532,19.3462 -50.4928,48.91811 -59.439,83.55671 10.4519,8.5182 17.1294,21.4902 17.1294,36.0333 0,14.5407 -6.6798,27.5128 -17.1308,36.0294 8.9447,34.6409 30.4843,64.21201 59.4389,83.55821 l 24.1891,-40.52161 c -24.8454,-17.4861 -41.0954,-46.3664 -41.0954,-79.0691 z m 164.36501,117.29051 c -15.8257,9.137 -21.2438,29.3625 -12.1091,45.1814 9.1368,15.8249 29.3616,21.2468 45.1873,12.1099 15.8204,-9.1346 21.2408,-29.3616 12.1039,-45.1851 -9.1332,-15.8174 -29.3617,-21.2393 -45.1821,-12.1062 z M 443.31069,360.36896 c -18.2761,0 -33.0857,14.8074 -33.0857,33.0843 0,18.2715 14.8096,33.0811 33.0857,33.0811 18.26991,0 33.08111,-14.8096 33.08111,-33.0811 0,-18.2769 -14.8112,-33.0843 -33.08111,-33.0843"
                                      id="circle-of-friends"
                                      style={{
                                        fill: '#ffffff', fillOpacity: 1, fillRule: 'nonzero', stroke: 'none'
                                      }}
                                    />
                                  </g>
                                </svg>
                              );
                            default:
                              return project.serverName;
                          }
                        })()}
                      </div>
)}
                  />

                  <CardContent>
                    <Typography component="p">
                      Path:
                      {' '}
                      {project.localPath}
                    </Typography>
                    <br />
                    <Button
                      className={classes.button}
                      color="primary"
                      component={Link}
                      to={`/project-backup/${project._id}`}
                      style={{marginRight:10}}
                    >
                      Info
                      <InfoOutlinedIcon style={{fontSize:17}}/>
                    </Button>
                    <Button
                    type='download'
                      className={classes.button}
                      color="primary"
                        href={`http://${process.env.IP_API}/buckler/api/functions/downloadProjectID/${project._id}`}              >
                        Download
                      <GetAppIcon style={{fontSize:17}}/>
                    </Button>
  
                    
                  </CardContent>
                </Card>
              </div>
            </Grid>
          ))}
        </Grid>

      </div>

      
    );
    
  }
}

RecipeReviewCard.propTypes = {
  classes: PropTypes.object.isRequired,
};

export default withStyles(styles)(RecipeReviewCard);
